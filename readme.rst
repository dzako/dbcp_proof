This repository contains source files and numerical data of the computer
assisted proof of a heteroclinic connection in diblock copolymer model
(DBCP) as presented in the paper entitled

*“Computer-assisted proof of heteroclinic connections in the
one-dimensional Ohta-Kawasaki model”*

by Jacek Cyranka and Thomas Wanner

`https://arxiv.org/abs/1703.01022<https://arxiv.org/abs/1703.01022/>`_

The code uses the code by Jacek Cyranka published in previous works

-  *Existence of globally attracting fixed points of viscous Burgers
   equation with constant forcing. A computer assisted proof*
   `link<http://ww2.ii.uj.edu.pl/~cyranka/Burgers/>`_
-  *Efficient and generic algorithm for rigorous integration forward in
   time of dPDEs: Part I* `link<http://ww2.ii.uj.edu.pl/~cyranka/FFT/>`_

the file ``config.in`` contains the global configuration of the
algorithm. The file included in the repository contains the
configuration for the example used in the paper.

::

    m=15
    M=75
    dftPts=32
    dftPts2=400
    order=16
    step=0.002
    lambda=4
    sigma=0.40528473456935108
    piOverL=0.5



where ``m`` is the Galerkin approximation dimension (denoted the same in
the paper), ``M`` is the finite dimensional part of the tail (denoted
the same in the paper), ``dftPts`` is the number of points for the
discrete Fourier transform (it has to be ``>2m`` for the considered
equation), ``dftPts2`` is not used in the proof, ``order`` is the Taylor
method order, ``step`` is the fixed time step used by the integrator,
``lambda`` is the :math:`\lambda = 1/\epsilon^2` parameter in the
diblock copolymer equation (see the referenced paper for the detailed
form), ``sigma`` is the :math:`\sigma` parameter in the equation
(to obtain the value :math:`4/\pi^2` in Theorem, we add to it the small interval
:math:`[-10^{-16},10^{-16}]`), ``piOverL`` is the value of
:math:`\pi` divided by the length of the domain :math:`L`.

The main program source is ``DBCPModelHetConProof.cpp``. The program
performs three steps of the proof, as described in section 4 Proof of
the main result in the paper. See the paper for the details. The program
has to be called exactly in the order specified below.

Heteroclinic to local/global minimizer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The same computer program is used to prove heterolinic to the local and 
the global minimizers. The last (third) parameter (either ``local`` or 
``global``). In the guidelines below the third parameter is always set
to ``local``, the result is the proof of the heteroclinic to the local
minimizer. In order to perform the proof of the heteroclinic to the 
global, the last parameter needs to be changed into ``global``  in all
the lines below.


First step
~~~~~~~~~~

Construction of self-consistent bounds
:math:`\mathcal{W}_u\subset H^\prime`, such that :math:`\mathcal{W}_u`
is an unstable isolating block. :math:`\mathcal{W}_u` is centered at the
origin, and is verified to satisfy the cone condition. After succesfull compilation
the first step of the proof (for the local minimizer) is performed by the 
program by calling the program with the arguments as follows

::

    ./DBCPModelHetConProof manifold local

The program prints out to the standart output the constructed
self-consistent bounds :math:`\mathcal{W}_u` using the format

::

    mode_index: interval_bounds


It also outputs the values used to verify cone condition (e.g. the value
denoted in the paper :math:`\varepsilon`, which is required to be
positive).



The program outputs the numerical data with one of the faces of
:math:`\mathcal{W}_u` (denoted in the paper by :math:`W_0`) to the file

::

    manifold.in


This file is going to be the input to the next steps of the proof (the
following program calls as described).



The file ``unstable_box_log.txt`` generated by the program contains some
output from the algorithm computing the unstable isolating block
:math:`\mathcal{W}_u`. And output from the verification of the cone
conditions (e.g. cone conditions vector with values).

Second step
~~~~~~~~~~~

After performing the first step
the second step of the proof (for the local minimizer) is performed by the 
program by calling the program with the arguments as follows

::

    ./DBCPModelHetConProof fixedpoint local

Construction of self-consistent bounds
:math:`\mathcal{W}_s\subset H^\prime`, such that :math:`\mathcal{W}_s`
is a stable isolating block. :math:`\mathcal{W}_s` is centered at a
numerically computed approximation to the actual stable equilibrium
:math:`z^s_0`. This step requires different configuration (Galerkin
approximation dimension must be larger) it is contained in the file
``fixedpoint_config.in``.

Also there is another input file needed. File ``fixedPoint.in`` contains
the approximate stable fixed point, which is used to find appropriate
coordinates for the algorithm building the stable isolating block
:math:`\mathcal{W}_s`.

::

    m=39
    M=250
    dftPts=80
    dftPts2=400
    order=7
    step=0.0001
    lambda=4
    sigma=0.40528473456935108
    piOverL=0.5

The file ``stable_box_log.txt`` generated by the program contains some
output from the algorithm computing the stable isolating block
:math:`\mathcal{W}_s`.

The program outputs to the standart output the constructed
self-consistent bounds :math:`\mathcal{W}_s` using the format

::

    mode_index: interval_bounds

The finite part of the bounds :math:`\mathcal{W}_s` are computed in the
eigenbasis, the used coordinates are being saved into the files ``Q.in``
and ``Qinv.in`` (used in the following step). The finite dimensionl part
of the bounds is saved into the files ``x0.in`` and ``r.in`` (decomposed
into middle point and radiuses and used in the following step).

The numerical data of the self-consistent bounds :math:`\mathcal{W}_s`
are saved into the file (used in the following step)

::

    basin.in




Third step
~~~~~~~~~~

The final step of the algorithm. Numerically integrate forward in time
the bounds containing a part of unstable manifold (denoted :math:`W_0`
in the paper) until it is trapped in the interior of
:math:`\mathcal{W}_s`.

After performing the second step
the third step of the proof (for the local minimizer) is performed by the 
program by calling the program with the arguments as follows

::

    ./DBCPModelHetConProof integrate local


The program reads the input bounds for :math:`W_0` and
:math:`\mathcal{W}_s` computed in the previous steps from the files
``manifold.in``, ``basin.in`` and the detailed data about a finite
dimensional part of :math:`\mathcal{W}_s` saved in ``Q.in``,
``Qinv.in``, ``x0.in`` and ``r.in``.
The program outpus to the standard output the polynomial bounds read
from the input files ``manifold.in``, and ``basin.in``. Then it outputs
status of the integration process, when the entry of the time propagated
:math:`W_0` into :math:`W_s` is achieved (the third step was completed)
it outputs the time when the goal was achieved, and the final bounds.

Detailed numerical data can be found in the logfile
``integration_log.txt`` generated by the program, to which at each
timestep it saves

-  the vector being finite dimensional part of the propagated bounds,
-  each :math:`100` steps of the integration the full infinite
   dimensional polynomial bounds.
-  at which coordinates the entry of :math:`W_0` into
   :math:`\mathcal{W}_s` is NOT yet attained.

Source codes compilation instruction
~~~~~~~~~~
For those willing to compile the program on their machine we present
compilation instructions. Program is written in C++ , gcc compiler 
is required to compile it. It has checked to compile successfully 
on 4.9.2 (Ubuntu 4.9.2-10ubuntu13). 

After unzipping the folder call

``./configure`` 
and then 

``make`` 

in the main folder,  then

``cd DBCP``

and 

``make``.

After successful compilation the binary file ``DBCPModelHetConProof`` 
appears in ``DBCP`` folder. Then run the program according to the 
instructions provided above.